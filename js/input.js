// Input Manager - ENERGY AS FUEL SYSTEM V2.0\n// Player uses energy for movement, same rules as AI\nconst InputManager = {\n    selectedPlanet: null,\n    hoveredPlanet: null,\n    mouseX: 0,\n    mouseY: 0,\n    tooltip: null,\n    isRightClickHeld: false,\n    rightClickStartTime: 0,\n    \n    init() {\n        this.setupEventListeners();\n        this.createTooltip();\n        console.log('üéÆ Input Manager initialized - ENERGY AS FUEL SYSTEM');\n    },\n\n    setupEventListeners() {\n        const canvas = document.getElementById('gameCanvas');\n        \n        // Mouse events\n        canvas.addEventListener('click', (e) => this.handleClick(e));\n        canvas.addEventListener('contextmenu', (e) => this.handleRightClick(e));\n        canvas.addEventListener('mousemove', (e) => this.handleMouseMove(e));\n        canvas.addEventListener('mousedown', (e) => this.handleMouseDown(e));\n        canvas.addEventListener('mouseup', (e) => this.handleMouseUp(e));\n        \n        // Keyboard events\n        document.addEventListener('keydown', (e) => this.handleKeyDown(e));\n        \n        // Prevent context menu\n        canvas.addEventListener('contextmenu', (e) => e.preventDefault());\n    },\n\n    createTooltip() {\n        this.tooltip = document.createElement('div');\n        this.tooltip.id = 'game-tooltip';\n        this.tooltip.style.cssText = `\n            position: absolute;\n            background: rgba(0, 0, 0, 0.9);\n            color: white;\n            padding: 8px 12px;\n            border-radius: 6px;\n            font-size: 12px;\n            pointer-events: none;\n            z-index: 1000;\n            max-width: 300px;\n            border: 1px solid #444;\n            display: none;\n        `;\n        document.body.appendChild(this.tooltip);\n    },\n\n    handleClick(e) {\n        if (e.button !== 0) return; // Only left click\n        \n        const planet = this.getPlanetAtPosition(e.offsetX, e.offsetY);\n        \n        if (planet) {\n            this.selectPlanet(planet);\n        } else {\n            this.deselectPlanet();\n        }\n    },\n\n    // ENERGY FUEL: Enhanced right click for movement validation\n    handleRightClick(e) {\n        e.preventDefault();\n        \n        const targetPlanet = this.getPlanetAtPosition(e.offsetX, e.offsetY);\n        \n        if (!targetPlanet) return;\n        \n        // Building menu for owned planets\n        if (targetPlanet.owner === 'player') {\n            this.showBuildingMenu(targetPlanet, e.offsetX, e.offsetY);\n            return;\n        }\n        \n        // Fleet sending for attacks\n        if (this.selectedPlanet && this.selectedPlanet.owner === 'player' && \n            targetPlanet !== this.selectedPlanet) {\n            this.attemptFleetSend(this.selectedPlanet, targetPlanet);\n        }\n    },\n\n    // ENERGY FUEL: Validate energy cost before sending\n    attemptFleetSend(source, target) {\n        if (source.ships <= 1) {\n            this.showFeedback('No hay suficientes naves para enviar', 'warning');\n            return;\n        }\n        \n        const distance = Utils.distance(source, target);\n        const shipsToSend = Math.floor(source.ships / 2); // Send half by default\n        \n        // ENERGY FUEL: Check energy cost\n        const energyCost = CONFIG.calculateMovementCost(shipsToSend, distance);\n        const canAfford = ResourceManager.canAffordMovement(shipsToSend, distance);\n        \n        if (!canAfford) {\n            const currentEnergy = ResourceManager.getEnergy();\n            this.showEnergyInsufficientFeedback(energyCost, currentEnergy, shipsToSend, distance);\n            return;\n        }\n        \n        // Execute movement\n        if (ResourceManager.payForMovement(shipsToSend, distance)) {\n            FleetManager.createFleet(source, target, shipsToSend, 'player');\n            \n            // Show success feedback with energy cost\n            const costInfo = CONFIG.getMovementCostInfo(shipsToSend, distance);\n            this.showFeedback(\n                `‚ö° ${shipsToSend} naves enviadas | Coste: ${costInfo.total} energ√≠a (${costInfo.perShip}/nave)`, \n                'success'\n            );\n        }\n    },\n\n    // ENERGY FUEL: Enhanced feedback for energy costs\n    showEnergyInsufficientFeedback(needed, available, ships, distance) {\n        const shortfall = needed - available;\n        this.showFeedback(\n            `‚ùå Energ√≠a insuficiente: Necesitas ${needed}, tienes ${available} (faltan ${shortfall})`, \n            'error'\n        );\n        \n        // Also show what they could afford\n        let maxAffordableShips = 0;\n        for (let testShips = 1; testShips <= ships; testShips++) {\n            const testCost = CONFIG.calculateMovementCost(testShips, distance);\n            if (testCost <= available) {\n                maxAffordableShips = testShips;\n            } else {\n                break;\n            }\n        }\n        \n        if (maxAffordableShips > 0) {\n            setTimeout(() => {\n                this.showFeedback(\n                    `üí° Puedes enviar m√°ximo ${maxAffordableShips} naves con tu energ√≠a actual`, \n                    'info'\n                );\n            }, 2000);\n        } else {\n            setTimeout(() => {\n                this.showFeedback(\n                    `üî¨ Construye un Laboratorio de Energ√≠a para generar m√°s combustible`, \n                    'info'\n                );\n            }, 2000);\n        }\n    },\n\n    showFeedback(message, type = 'info') {\n        // Remove existing feedback\n        const existing = document.getElementById('game-feedback');\n        if (existing) existing.remove();\n        \n        const feedback = document.createElement('div');\n        feedback.id = 'game-feedback';\n        \n        const colors = {\n            success: '#00ff88',\n            warning: '#ffaa00',\n            error: '#ff4444',\n            info: '#4a90e2'\n        };\n        \n        feedback.style.cssText = `\n            position: fixed;\n            top: 80px;\n            left: 50%;\n            transform: translateX(-50%);\n            background: rgba(0, 0, 0, 0.9);\n            color: ${colors[type] || colors.info};\n            padding: 12px 20px;\n            border-radius: 8px;\n            font-size: 14px;\n            font-weight: bold;\n            z-index: 2000;\n            border: 2px solid ${colors[type] || colors.info};\n            box-shadow: 0 4px 20px rgba(0,0,0,0.5);\n            animation: slideDown 0.3s ease-out;\n        `;\n        \n        feedback.textContent = message;\n        document.body.appendChild(feedback);\n        \n        // Auto remove after 3 seconds\n        setTimeout(() => {\n            if (feedback.parentNode) {\n                feedback.style.animation = 'slideUp 0.3s ease-in';\n                setTimeout(() => feedback.remove(), 300);\n            }\n        }, 3000);\n    },\n\n    showBuildingMenu(planet, x, y) {\n        if (typeof BuildingUI !== 'undefined') {\n            BuildingUI.showBuildingMenu(planet, x, y);\n        }\n    },\n\n    handleMouseMove(e) {\n        this.mouseX = e.offsetX;\n        this.mouseY = e.offsetY;\n        \n        const planet = this.getPlanetAtPosition(e.offsetX, e.offsetY);\n        \n        if (planet !== this.hoveredPlanet) {\n            if (this.hoveredPlanet) {\n                this.hoveredPlanet.setHovered(false);\n            }\n            \n            this.hoveredPlanet = planet;\n            \n            if (planet) {\n                planet.setHovered(true);\n                this.showTooltip(planet, e.pageX, e.pageY);\n            } else {\n                this.hideTooltip();\n            }\n        }\n        \n        if (planet) {\n            this.updateTooltipPosition(e.pageX, e.pageY);\n        }\n    },\n\n    handleMouseDown(e) {\n        if (e.button === 2) { // Right mouse button\n            this.isRightClickHeld = true;\n            this.rightClickStartTime = Date.now();\n        }\n    },\n\n    handleMouseUp(e) {\n        if (e.button === 2) {\n            this.isRightClickHeld = false;\n        }\n    },\n\n    handleKeyDown(e) {\n        const key = e.key.toLowerCase();\n        \n        if (CONFIG.KEYBOARD.assignments[key]) {\n            const planetId = CONFIG.KEYBOARD.assignments[key];\n            const planet = GameEngine.planets.find(p => p.id === planetId);\n            \n            if (planet && planet.owner === 'player') {\n                this.selectPlanet(planet);\n                e.preventDefault();\n            }\n        }\n        \n        // ENERGY FUEL: Debug keys\n        if (e.ctrlKey) {\n            switch (key) {\n                case 'e':\n                    ResourceManager.debugInfo();\n                    e.preventDefault();\n                    break;\n                case 'r':\n                    ResourceManager.debugAddEnergy(50);\n                    this.showFeedback('Debug: +50 energ√≠a', 'info');\n                    e.preventDefault();\n                    break;\n            }\n        }\n    },\n\n    selectPlanet(planet) {\n        if (this.selectedPlanet) {\n            this.selectedPlanet.element.style.strokeWidth = '';\n            this.selectedPlanet.element.style.stroke = '';\n        }\n        \n        this.selectedPlanet = planet;\n        \n        if (planet) {\n            planet.element.style.stroke = '#ffff00';\n            planet.element.style.strokeWidth = '3';\n            \n            // ENERGY FUEL: Show planet info with energy context\n            if (planet.owner === 'player') {\n                const energyGen = ResourceManager.getPlanetEnergyGeneration(planet);\n                this.showFeedback(\n                    `üìç Planeta seleccionado | Energ√≠a: +${energyGen.toFixed(1)}/min`, \n                    'info'\n                );\n            }\n        }\n    },\n\n    deselectPlanet() {\n        if (this.selectedPlanet) {\n            this.selectedPlanet.element.style.strokeWidth = '';\n            this.selectedPlanet.element.style.stroke = '';\n            this.selectedPlanet = null;\n        }\n    },\n\n    // ENERGY FUEL: Enhanced tooltip with energy costs\n    showTooltip(planet, x, y) {\n        let content = planet.getTooltipInfo();\n        \n        // Add energy cost info for potential movements\n        if (this.selectedPlanet && this.selectedPlanet.owner === 'player' && \n            planet !== this.selectedPlanet) {\n            \n            const distance = Utils.distance(this.selectedPlanet, planet);\n            const ships = Math.floor(this.selectedPlanet.ships / 2);\n            \n            if (ships > 0) {\n                const costInfo = CONFIG.getMovementCostInfo(ships, distance);\n                const canAfford = ResourceManager.canAffordMovement(ships, distance);\n                \n                content += `<br><hr style=\"border: 1px solid #444; margin: 8px 0;\">`;\n                content += `<strong>Coste de movimiento:</strong><br>`;\n                content += `‚ö° ${costInfo.total} energ√≠a para ${ships} naves<br>`;\n                content += `üìè Distancia: ${distance.toFixed(0)}px<br>`;\n                content += `üí∞ ${costInfo.perShip} energ√≠a/nave`;\n                \n                if (!canAfford) {\n                    content += `<br><span style=\"color: #ff4444\">‚ùå Energ√≠a insuficiente</span>`;\n                } else {\n                    content += `<br><span style=\"color: #00ff88\">‚úÖ Movimiento posible</span>`;\n                }\n            }\n        }\n        \n        this.tooltip.innerHTML = content;\n        this.tooltip.style.display = 'block';\n        this.updateTooltipPosition(x, y);\n    },\n\n    updateTooltipPosition(x, y) {\n        if (!this.tooltip || this.tooltip.style.display === 'none') return;\n        \n        const tooltipRect = this.tooltip.getBoundingClientRect();\n        const windowWidth = window.innerWidth;\n        const windowHeight = window.innerHeight;\n        \n        let left = x + 15;\n        let top = y - tooltipRect.height - 10;\n        \n        if (left + tooltipRect.width > windowWidth) {\n            left = x - tooltipRect.width - 15;\n        }\n        \n        if (top < 0) {\n            top = y + 15;\n        }\n        \n        this.tooltip.style.left = left + 'px';\n        this.tooltip.style.top = top + 'px';\n    },\n\n    hideTooltip() {\n        if (this.tooltip) {\n            this.tooltip.style.display = 'none';\n        }\n    },\n\n    getPlanetAtPosition(x, y) {\n        return GameEngine.planets.find(planet => {\n            const distance = Math.sqrt(\n                Math.pow(x - planet.x, 2) + Math.pow(y - planet.y, 2)\n            );\n            return distance <= planet.radius;\n        });\n    },\n\n    // ENERGY FUEL: Method to check current energy situation\n    getEnergyStatus() {\n        const energy = ResourceManager.getEnergy();\n        const generation = ResourceManager.getTotalEnergyGeneration();\n        \n        return {\n            current: energy,\n            generation: generation,\n            level: energy < 20 ? 'critical' : \n                   energy < 50 ? 'low' : \n                   energy < 100 ? 'medium' : 'high'\n        };\n    },\n\n    cleanup() {\n        if (this.tooltip && this.tooltip.parentNode) {\n            this.tooltip.parentNode.removeChild(this.tooltip);\n        }\n        \n        // Remove any feedback messages\n        const feedback = document.getElementById('game-feedback');\n        if (feedback) feedback.remove();\n    }\n};\n\n// CSS for animations\nconst style = document.createElement('style');\nstyle.textContent = `\n    @keyframes slideDown {\n        from { transform: translateX(-50%) translateY(-20px); opacity: 0; }\n        to { transform: translateX(-50%) translateY(0); opacity: 1; }\n    }\n    \n    @keyframes slideUp {\n        from { transform: translateX(-50%) translateY(0); opacity: 1; }\n        to { transform: translateX(-50%) translateY(-20px); opacity: 0; }\n    }\n`;\ndocument.head.appendChild(style);"