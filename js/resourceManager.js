// Resource Manager - ENERGY AS FUEL SYSTEM V2.0\n// Metal = Construction, Energy = Movement Fuel\nconst ResourceManager = {\n    // Resource tracking\n    resources: {\n        metal: 0,\n        energy: 0\n    },\n    \n    // AI energy tracking (unified system)\n    aiEnergy: 0,\n    \n    // Resource generation tracking\n    lastUpdate: 0,\n    updateInterval: 1000,\n    \n    // ENERGY FUEL SYSTEM: New configuration\n    config: {\n        metal: {\n            // Metal only for construction\n            generationRates: {\n                small: 18.0,  // Small planets: 18 metal/min\n                medium: 27.0, // Medium planets: 27 metal/min\n                large: 36.0   // Large planets: 36 metal/min\n            },\n            storageMultiplier: 3.0, // Less storage needed\n            shipCost: 0 // NO cost for movement\n        },\n        energy: {\n            // Energy for movement fuel\n            generationRates: {\n                small: 9.0,   // Small planets: 9 energy/min\n                medium: 12.0, // Medium planets: 12 energy/min\n                large: 15.0   // Large planets: 15 energy/min\n            },\n            storageMultiplier: 4.0, // High storage for fuel\n            shipCost: 1.5, // Base energy cost per ship\n            researchLabBonus: 6.0 // Research labs generate +6 energy/min\n        }\n    },\n\n    // ENERGY FUEL: Starting resources rebalanced\n    init() {\n        this.resources.metal = 75;  // Less metal (construction only)\n        this.resources.energy = 90; // More energy (fuel)\n        this.aiEnergy = 90;         // AI starts with same energy\n        this.lastUpdate = Date.now();\n        console.log('âš¡ Resource Manager initialized - ENERGY AS FUEL SYSTEM');\n        console.log(`Starting resources: ${this.resources.metal} metal, ${this.resources.energy} energy`);\n    },\n\n    // Main update loop\n    update() {\n        const now = Date.now();\n        if (now - this.lastUpdate >= this.updateInterval) {\n            this.generateResources();\n            this.updateAIEnergy();\n            this.lastUpdate = now;\n        }\n    },\n\n    // ENERGY FUEL: Resource generation\n    generateResources() {\n        if (!GameEngine || !GameEngine.planets) return;\n\n        let totalMetalGeneration = 0;\n        let totalEnergyGeneration = 0;\n        const playerPlanets = GameEngine.planets.filter(p => p.owner === 'player');\n\n        playerPlanets.forEach(planet => {\n            // Metal generation (construction only)\n            const metalGeneration = this.getPlanetMetalGeneration(planet);\n            const maxMetalStorage = this.getTotalMetalStorageCapacity();\n\n            if (this.resources.metal < maxMetalStorage) {\n                const metalPerSecond = metalGeneration / 60;\n                const actualMetalGeneration = Math.min(metalPerSecond, maxMetalStorage - this.resources.metal);\n                totalMetalGeneration += actualMetalGeneration;\n            }\n\n            // Energy generation (fuel)\n            const energyGeneration = this.getPlanetEnergyGeneration(planet);\n            const maxEnergyStorage = this.getTotalEnergyStorageCapacity();\n\n            if (this.resources.energy < maxEnergyStorage) {\n                const energyPerSecond = energyGeneration / 60;\n                const actualEnergyGeneration = Math.min(energyPerSecond, maxEnergyStorage - this.resources.energy);\n                totalEnergyGeneration += actualEnergyGeneration;\n            }\n        });\n\n        // Apply generation\n        if (totalMetalGeneration > 0) {\n            this.addMetal(totalMetalGeneration);\n        }\n        \n        if (totalEnergyGeneration > 0) {\n            this.addEnergy(totalEnergyGeneration);\n        }\n    },\n\n    // ENERGY FUEL: AI energy generation (same rules as player)\n    updateAIEnergy() {\n        if (!GameEngine || !GameEngine.planets) return;\n\n        let totalAIEnergyGeneration = 0;\n        const aiPlanets = GameEngine.planets.filter(p => p.owner === 'ai');\n        const maxAIEnergyStorage = this.getAIEnergyStorageCapacity();\n\n        aiPlanets.forEach(planet => {\n            const energyGeneration = this.getPlanetEnergyGeneration(planet);\n            if (this.aiEnergy < maxAIEnergyStorage) {\n                const energyPerSecond = energyGeneration / 60;\n                const actualGeneration = Math.min(energyPerSecond, maxAIEnergyStorage - this.aiEnergy);\n                totalAIEnergyGeneration += actualGeneration;\n            }\n        });\n\n        if (totalAIEnergyGeneration > 0) {\n            this.aiEnergy = Math.min(this.aiEnergy + totalAIEnergyGeneration, maxAIEnergyStorage);\n        }\n    },\n\n    // ENERGY FUEL: Metal generation (construction only)\n    getPlanetMetalGeneration(planet) {\n        const capacity = planet.capacity;\n        let rate;\n\n        if (capacity <= 25) {\n            rate = this.config.metal.generationRates.small;\n        } else if (capacity <= 45) {\n            rate = this.config.metal.generationRates.medium;\n        } else {\n            rate = this.config.metal.generationRates.large;\n        }\n\n        // Apply building multipliers\n        const multiplier = planet.metalGenerationMultiplier || 1.0;\n        return rate * multiplier;\n    },\n\n    // ENERGY FUEL: Energy generation (fuel + research labs)\n    getPlanetEnergyGeneration(planet) {\n        const capacity = planet.capacity;\n        let baseRate;\n\n        if (capacity <= 25) {\n            baseRate = this.config.energy.generationRates.small;\n        } else if (capacity <= 45) {\n            baseRate = this.config.energy.generationRates.medium;\n        } else {\n            baseRate = this.config.energy.generationRates.large;\n        }\n\n        // CRITICAL: Research Lab bonus\n        let researchLabBonus = 0;\n        if (planet.buildings && planet.buildings.research_lab && !planet.buildings.research_lab.constructing) {\n            researchLabBonus = this.config.energy.researchLabBonus;\n        }\n\n        return baseRate + researchLabBonus;\n    },\n\n    // Storage capacity calculations\n    getTotalMetalStorageCapacity() {\n        if (!GameEngine || !GameEngine.planets) return 300;\n        return GameEngine.planets\n            .filter(p => p.owner === 'player')\n            .reduce((total, planet) => total + (planet.capacity * this.config.metal.storageMultiplier), 0);\n    },\n\n    getTotalEnergyStorageCapacity() {\n        if (!GameEngine || !GameEngine.planets) return 400;\n        return GameEngine.planets\n            .filter(p => p.owner === 'player')\n            .reduce((total, planet) => total + (planet.capacity * this.config.energy.storageMultiplier), 0);\n    },\n\n    getAIEnergyStorageCapacity() {\n        if (!GameEngine || !GameEngine.planets) return 400;\n        return GameEngine.planets\n            .filter(p => p.owner === 'ai')\n            .reduce((total, planet) => total + (planet.capacity * this.config.energy.storageMultiplier), 0);\n    },\n\n    // ENERGY FUEL: Movement cost calculation\n    calculateMovementCost(ships, distance) {\n        return CONFIG.calculateMovementCost(ships, distance);\n    },\n\n    // ENERGY FUEL: Check if player can afford movement\n    canAffordMovement(ships, distance) {\n        const cost = this.calculateMovementCost(ships, distance);\n        return this.resources.energy >= cost;\n    },\n\n    // ENERGY FUEL: Check if AI can afford movement\n    canAffordAIMovement(ships, distance) {\n        const cost = this.calculateMovementCost(ships, distance);\n        return this.aiEnergy >= cost;\n    },\n\n    // ENERGY FUEL: Pay for player movement\n    payForMovement(ships, distance) {\n        const cost = this.calculateMovementCost(ships, distance);\n        if (this.canAffordMovement(ships, distance)) {\n            this.spendEnergy(cost);\n            console.log(`âš¡ Player movement: ${ships} ships, ${distance.toFixed(0)}px = ${cost} energy`);\n            return true;\n        }\n        return false;\n    },\n\n    // ENERGY FUEL: Pay for AI movement\n    payForAIMovement(ships, distance) {\n        const cost = this.calculateMovementCost(ships, distance);\n        if (this.canAffordAIMovement(ships, distance)) {\n            this.aiEnergy -= cost;\n            console.log(`ðŸ¤– AI movement: ${ships} ships, ${distance.toFixed(0)}px = ${cost} energy`);\n            return true;\n        }\n        return false;\n    },\n\n    // Resource manipulation methods\n    addMetal(amount) {\n        const maxCapacity = this.getTotalMetalStorageCapacity();\n        this.resources.metal = Math.min(this.resources.metal + amount, maxCapacity);\n        this.updateUI();\n    },\n\n    spendMetal(amount) {\n        if (this.resources.metal >= amount) {\n            this.resources.metal -= amount;\n            this.updateUI();\n            return true;\n        }\n        return false;\n    },\n\n    getMetal() {\n        return Math.floor(this.resources.metal);\n    },\n\n    addEnergy(amount) {\n        const maxCapacity = this.getTotalEnergyStorageCapacity();\n        this.resources.energy = Math.min(this.resources.energy + amount, maxCapacity);\n        this.updateUI();\n    },\n\n    spendEnergy(amount) {\n        if (this.resources.energy >= amount) {\n            this.resources.energy -= amount;\n            this.updateUI();\n            return true;\n        }\n        return false;\n    },\n\n    getEnergy() {\n        return Math.floor(this.resources.energy);\n    },\n\n    getAIEnergy() {\n        return Math.floor(this.aiEnergy);\n    },\n\n    // Legacy compatibility\n    getPlayerMetal() { return this.getMetal(); }\n    getPlayerEnergy() { return this.getEnergy(); }\n    removeMetal(amount) { return this.spendMetal(amount); }\n    canAffordMetal(amount) { return this.resources.metal >= amount; }\n\n    // ENERGY FUEL: Legacy ship cost methods (now free)\n    canAffordShip(shipCount = 1) {\n        return true; // Ships are free to send (energy cost handled separately)\n    },\n\n    payForShips(shipCount = 1) {\n        return true; // No metal cost for sending\n    },\n\n    // UI Updates\n    updateUI() {\n        this.updateMainDisplays();\n        \n        if (typeof ResourceUI !== 'undefined' && ResourceUI.update) {\n            ResourceUI.update();\n        }\n    },\n\n    updateMainDisplays() {\n        const resourceDisplay = document.getElementById('mainResourceDisplay');\n        \n        if (resourceDisplay) {\n            const metalRate = this.getTotalMetalGeneration();\n            const energyRate = this.getTotalEnergyGeneration();\n            \n            resourceDisplay.innerHTML = `\n                ðŸ”© Metal: ${this.getMetal()} (+${metalRate.toFixed(1)}/min) | \n                âš¡ Energy: ${this.getEnergy()} (+${energyRate.toFixed(1)}/min)\n            `;\n        }\n    },\n\n    // Get total generation rates\n    getTotalMetalGeneration() {\n        if (!GameEngine || !GameEngine.planets) return 0;\n        return GameEngine.planets\n            .filter(p => p.owner === 'player')\n            .reduce((total, planet) => total + this.getPlanetMetalGeneration(planet), 0);\n    },\n\n    getTotalEnergyGeneration() {\n        if (!GameEngine || !GameEngine.planets) return 0;\n        return GameEngine.planets\n            .filter(p => p.owner === 'player')\n            .reduce((total, planet) => total + this.getPlanetEnergyGeneration(planet), 0);\n    },\n\n    // Get movement cost info for UI\n    getMovementCostInfo(ships, distance) {\n        return CONFIG.getMovementCostInfo(ships, distance);\n    },\n\n    // Planet resource info for tooltips\n    getPlanetResourceInfo(planet) {\n        if (planet.owner !== 'player') return null;\n\n        const metalGeneration = this.getPlanetMetalGeneration(planet);\n        const energyGeneration = this.getPlanetEnergyGeneration(planet);\n        \n        return {\n            metal: { generation: metalGeneration.toFixed(1) },\n            energy: { generation: energyGeneration.toFixed(1) }\n        };\n    },\n\n    // Reset\n    reset() {\n        this.resources.metal = 75;\n        this.resources.energy = 90;\n        this.aiEnergy = 90;\n        this.lastUpdate = Date.now();\n        this.updateUI();\n        console.log('âš¡ Resource Manager reset - ENERGY AS FUEL SYSTEM');\n    },\n\n    // Debug methods\n    debugInfo() {\n        const info = {\n            'Player Metal': this.getMetal(),\n            'Player Energy': this.getEnergy(),\n            'AI Energy': this.getAIEnergy(),\n            'Metal Gen/min': this.getTotalMetalGeneration().toFixed(1),\n            'Energy Gen/min': this.getTotalEnergyGeneration().toFixed(1),\n            'Player Planets': GameEngine.planets ? GameEngine.planets.filter(p => p.owner === 'player').length : 0,\n            'AI Planets': GameEngine.planets ? GameEngine.planets.filter(p => p.owner === 'ai').length : 0\n        };\n        \n        console.table(info);\n        return info;\n    }\n};\n\n// Export for global access\nwindow.ResourceManager = ResourceManager;"